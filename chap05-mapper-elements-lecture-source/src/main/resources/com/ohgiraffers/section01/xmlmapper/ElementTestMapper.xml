<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.ohgiraffers.section01.xmlmapper.ElementTestMapper">


    <cache eviction="LRU" flushInterval="1000" size="512" readOnly="true"/>

    <select id="selectCacheTest" resultType="java.lang.String">
        SELECT
            MENU_NAME
        FROM
            TBL_MENU
    </select>
<!-- <resultMap> 엘리먼트
    1. DB에서 조회한 결과 데이터를 객체에 로드하는 방법을 정의하는 엘리먼트이다.
    2. resultMap 엘리먼트는 MyBatis에서 가장 중요하고 강력한 엘리먼트이다.
    ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
    <resultMap 엘리먼트 속성>
        1. id : 매핑 구문에서 결과 매핑을 사용할 때 구분하기 위한 ID이다.
        2. type : 결과 매핑을 적용하는 대상 객체 타입 (= 매핑 구문의 결과 데이터를 저장 할 java타입을 지정)을 의미한다.
        3. extends : 자바의 상속처럼 기존에 정의된 매핑 결과를 상속받아 추가적인 매핑정보로 확장할 때 사용한다.
                    ( -> 부모 resultMap 아이디 사용)
        4. autoMapping : 결과 매핑을 자동 매핑을 할 것인지를 결정한다.
                         auto 매핑 설정은 동일한 컬럼명이 있는 경우 위험성을 가지기 때문에 사용하지 않는 것이 안전하다. -->
    <resultMap id="menuResultMap1" type="com.ohgiraffers.common.MenuDTO" autoMapping="false">
        <id property="code" column="MENU_CODE"/>
        <result property="name" column="MENU_NAME"/>
        <result property="price" column="MENU_PRICE"/>
        <result property="categoryCode" column="CATEGORY_CODE"/>
    </resultMap>
    <resultMap id="menuResultMap2" type="com.ohgiraffers.common.MenuDTO" extends="menuResultMap1">
        <result property="orderableStatus" column="ORDERABLE_STATUS"/>
    </resultMap>

    <select id="selectResultMapTest" resultMap="menuResultMap2">
        SELECT A.MENU_CODE
                , A.MENU_NAME
                , A.MENU_PRICE
                , A.CATEGORY_CODE
                , A.ORDERABLE_STATUS
        FROM      TBL_MENU A
        WHERE     A.ORDERABLE_STATUS = 'Y'
    </select>
<!--    <resultMap>의 하위 엘리먼트
            <id> : primary key 컬럼을 매핑하기 위한 태그이다.
            <result> : pk가 아닌 일반 컬럼에 매핑하기 위한 태그이다.
            <constructor> : 인스턴스화 되는 클래스의 생성자에 결과를 삽입하기 위해 사용한다.
                                    <idArg>, <arg> 하위 엘리먼트가 있다.
            <association> : 복잡한 타입의 연관관계로 1:1 포함관계인 경우 사용한다.
            <collection> : 복잡한 타입의 연관관계로 1:다 포함관계인 경우 사용한다.
            <discriminator>  : 조건에 따라 다른 resultMap이 매핑되도록 한다.                   -->
    <resultMap id="menuResultMap3" type="com.ohgiraffers.common.MenuDTO">
<!--        id, result 엘리먼트는 setter를 이용하기 때문에 property에 필드명을 지정했다.
            생성자를 사용하는 경우 순서와 타입을 맞춰서 기재해야 한다.                   -->
        <constructor>
            <idArg column="MENU_CODE" javaType="_int"/>
            <arg column="MENU_NAME" javaType="string"/>
            <arg column="MENU_PRICE" javaType="_int"/>
            <arg column="CATEGORY_CODE" javaType="_int"/>
            <arg column="ORDERABLE_STATUS" javaType="string"/>
        </constructor>
    </resultMap>

    <select id="selectResultMapConstructorTest" resultMap="menuResultMap3">
        SELECT A.MENU_CODE
             , A.MENU_NAME
             , A.MENU_PRICE
             , A.CATEGORY_CODE
             , A.ORDERABLE_STATUS
        FROM      TBL_MENU A
        WHERE     A.ORDERABLE_STATUS = 'Y'
    </select>

<!--    <resultMap id="menuAndCategoryResultMap" type="com.ohgiraffers.common.MenuAndCategoryDTO">-->
<!--        <id property="code" column="MENU_CODE"/>-->
<!--        <result property="name" column="MENU_NAME"/>-->
<!--        <result property="price" column="MENU_PRICE"/>-->
<!--        <result property="categoryCode" column="CATEGORY_CODE"/>-->
<!--        <result property="orderableStatus" column="ORDERABLE_STATUS"/>-->
<!--        <association property="category" resultMap="categoryResultMap"/>  -->
<!--    </resultMap>-->
<!--    -->
<!--    -->
<!--    <resultMap id="categoryResultMap" type="com.ohgiraffers.common.CategoryDTO">-->
<!--        <id property="code" column="CATEGORY_CODE"/>-->
<!--        <result property="name" column="CATEGORY_NAME"/>-->
<!--        <result property="refCategoryCode" column="REF_CATEGORY_CODE"/>-->
<!--    </resultMap>-->

<!--    association property에서는 javaType을 쓴다.   -->
    <resultMap id="menuAndCategoryResultMap" type="com.ohgiraffers.common.MenuAndCategoryDTO">
        <id property="code" column="MENU_CODE"/>
        <result property="name" column="MENU_NAME"/>
        <result property="price" column="MENU_PRICE"/>
        <result property="orderableStatus" column="ORDERABLE_STATUS"/>

        <association property="category" javaType="com.ohgiraffers.common.CategoryDTO">
            <id property="code" column="CATEGORY_CODE"/>
            <result property="name" column="CATEGORY_NAME"/>
            <result property="refCategoryCode" column="REF_CATEGORY_CODE"/>
        </association>
    </resultMap>


    <select id="selectResultMapAssociationTest" resultMap="menuAndCategoryResultMap">
    SELECT A.MENU_CODE
            , A.MENU_NAME
            , A.MENU_PRICE
            , B.CATEGORY_CODE
            , B.CATEGORY_NAME
            , B.REF_CATEGORY_CODE
            , A.ORDERABLE_STATUS
    FROM      TBL_MENU A
                JOIN TBL_CATEGORY B ON (A.CATEGORY_CODE = B.CATEGORY_CODE)
    WHERE     A.ORDERABLE_STATUS = 'Y'
    </select>


<!--    asoociation, collection은 id, result 아래에 작성해야 오류가 발생하지 않는다.      -->
<!--    따로 만든 resultMap 사용 -->

<!--    <resultMap id="categoryAndMenuResultMap" type="com.ohgiraffers.common.CategoryAndMenuDTO">-->
<!--        <id property="code" column="CATEGORY_CODE"/>-->
<!--        <result property="name" column="CATEGORY_NAME"/>-->
<!--        <result property="refCategoryCode" column="REF_CATEGORY_CODE"/>-->
<!--        <collection property="menuLsit" resultMap="menuResultMap"/>-->
<!--    </resultMap>-->
<!--    -->
<!--    <resultMap id="menuResultMap" type="com.ohgiraffers.common.MenuDTO">-->
<!--        <id property="code" column="MENU_CODE"/>-->
<!--        <result property="name" column="MENU_NAME"/>-->
<!--        <result property="price" column="MENU_PRICE"/>-->
<!--        <result property="categoryCode" column="CATEGORY_CODE"/>-->
<!--        <result property="orderableStatus" column="ORDERABLE_STATUS"/>-->
<!--    </resultMap>-->

<!--    ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ-->

<!--    collection 내에 id, result 작성하는 방법 -->
<!--(석현) Connection property에서는 oftype을 쓴다. -->
    <resultMap id="categoryAndMenuResultMap" type="com.ohgiraffers.common.CategoryAndMenuDTO">
        <id property="code" column="CATEGORY_CODE"/>
        <result property="name" column="CATEGORY_NAME"/>
        <result property="refCategoryCode" column="REF_CATEGORY_CODE"/>
        <collection property="menuList" ofType="com.ohgiraffers.common.MenuDTO">
            <id property="code" column="MENU_CODE"/>
            <result property="name" column="MENU_NAME"/>
            <result property="price" column="MENU_PRICE"/>
            <result property="categoryCode" column="CATEGORY_CODE"/>
            <result property="orderableStatus" column="ORDERABLE_STATUS"/>
        </collection>
    </resultMap>

    <select id="selectResultMapCollectionTest" resultMap="categoryAndMenuResultMap">
        SELECT A.CATEGORY_CODE
            , A.CATEGORY_NAME
            , A.REF_CATEGORY_CODE
            , B.MENU_CODE
            , B.MENU_NAME
            , B.MENU_PRICE
            , B.CATEGORY_CODE
            , B.ORDERABLE_STATUS
        FROM TBL_CATEGORY A
                LEFT JOIN TBL_MENU B ON (A.CATEGORY_CODE = B.CATEGORY_CODE)
        ORDER BY A.CATEGORY_CODE
    </select>

<!--    <sql> 엘리먼트
        각 매핑 구문에서 공통으로 사용할 수 있는 SQL 문자열의 일부를 정의하고 재사용할 수 있다.        -->

    <sql id="columns">
          MENU_CODE
        , MENU_NAME
        , MENU_PRICE
        , CATEGORY_CODE
        , ORDERABLE_STATUS
    </sql>


    <select id="selectSqlTest" resultMap="menuResultMap2">
        SELECT
        <include refid="columns"/>
        FROM TBL_MENU
        WHERE ORDERABLE_STATUS = 'Y'
    </select>

<!--    <isnert> 엘리먼트
        insert, update, delete 엘리먼트는 사용하는 속성이 대부분 동일하지만
        insert 엘리먼트는 좀 더 많은 속성을 정의 할 수 있다.
        ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
        <공통 속성>
        - id : 매핑 구문을 구분하는 id 이다.
        - parameterType : 파라미터 타입을 지정한다.
        이미 정의된 별칭을 사용하거나, 클래스의 full-name을 사용한다.
        - flushCache : 매핑 구문을 실행할 때 캐시 삭제 여부를 설정한다.
        - timeoust : sql을 실행한 후 응답을 기다리는 최대 시간이다.
                     보통은 설정하지 않고 JDBC드라이버 자체의 타임아웃 값을 그대로 사용한다.
        - statementYpe : JDBC 구문타입을 지정한다. STATEMENT, PREPARED, CALLABLE 중
                         하나를 쓸 수 있으며 기본값은 PREPARED

        ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
        <추가 속성>
        - useGenerateKeys : 생성 키 값을 만들기 위해 JDBC의 getGenerateKeys 메소드를 호출할지 결정하며 기본값은 false
        - KeyProperty : insert 구문의 하위 엘리먼트인 selectKey 엘리먼트에 의한 반환값을 설정할 프로퍼티를 지정한다.
        - keyColumn : 생성 키를 가진 테이블의 컬럼명을 설정한다. (키 컬럼이 테이블의 첫 번째 행이 아닌 데이터 베이스에서만 필요하다 - PostgreSQL제외)

        ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ-->

    <insert id="insertNewCategory">
        INSERT INTO
            TBL_CATEGORY (
                          CATEGORY_NAME
        )
        VALUES (
                    #{ category.name }
               )
    </insert>

<!--    서버의 환경에서는 이런 방식이 그렇게 좋진 않음  -->
    <insert id="insertNewMenu">
        <selectKey keyProperty="category.code" order="BEFORE"  resultType="_int">
            SELECT AUTO_INCREMENT-1
            FROM INFORMATION_SCHEMA.TABLES
            WHERE TABLE_SCHEMA = 'menudb'
            AND TABLE_NAME = 'tbl_category'
        </selectKey>
            INSERT INTO TBL_MENU (
                                  MENU_NAME
                                , MENU_PRICE
                                , CATEGORY_CODE
                                , ORDERABLE_STATUS
                                 )
            VALUES (
                        #{ name }
                      , #{ price }
                      , #{ category.code }
                      , #{ orderableStatus }
        )
    </insert>
</mapper>